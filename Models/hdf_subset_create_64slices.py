# -*- coding: utf-8 -*-
"""gc_HDF_subset_create.ipynb
Automatically generated by Colaboratory.
Original file is located at
    https://colab.research.google.com/drive/1FZdFf_oqJFEOiYAzTtHu8TuvqwoO3y2Q
"""

import os
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import pandas as pd
from sklearn.metrics import confusion_matrix
import tensorflow as tf

"""#### Start of Google - Colaboratory setup
1. Auth setup
2. Keras install, check for GPU usage etc.
2. GCP Bucket - files download
"""
# !pip install keras
# from keras.models import load_model

# import tensorflow as tf
# device_name = tf.test.gpu_device_name()
# if device_name != '/device:GPU:0':
#     raise SystemError('GPU device not found')
# print('Found GPU at: {}'.format(device_name))

# from google.colab import auth
# auth.authenticate_user()

# project_id = '....'
# !gcloud config set project {project_id}

# bucket_name = 'dse_capstone_luna16'

# model_file = 'cnn_3d_64_64_3_HOLDOUT1_20180227_185500.hdf5'
# model_file = 'cnn_3d_64_64_3_HOLDOUT3_20180301_231003.hdf5'
# model_file = 'cnn_3d_64_64_3_HOLDOUT9_20180301_143310.hdf5'

# !gsutil ls -al gs://{'dse_capstone_luna16/LUNA16/hdf5-files'}/

# %time
# !gsutil cp gs://{'dse_capstone_luna16/LUNA16/hdf5-files'}/64x64x3-patch.hdf5 .




# !gsutil cp gs://{'dse_capstone_luna16/LUNA16/model-files'}/{model_file}  .


#!gsutil cp gs://{'dse_capstone_luna16/LUNA16/hdf5-files'}/64x64x64-patch.hdf5 .

"""#### End of Google - Colaboratory setup
"""

import argparse
parser = argparse.ArgumentParser(description='Prediction on HOLDOUT subset',add_help=True)
parser.add_argument("--holdout", type=int, default=5, help="HOLDOUT subset for predictions")
args = parser.parse_args()

# In[ ]:
HOLDOUT = args.holdout

%%time

df = h5py.File("64x64x64-patch.hdf5", "r")

# for name in [key for key in df.keys()]:
#     print(name);
#     print(df[name]);


subset5_idx = np.where(df["subsets"][:,0] == HOLDOUT)
len(subset5_idx[0])
# 175691

subset5_idx = np.sort(subset5_idx[0])

input_5 = df['input'][subset5_idx, :]
output_5 = df['output'][subset5_idx, :]
uuid_5 = df['uuid'][subset5_idx, :]

with h5py.File('subset5_64x64x64-patch' + '.hdf5', 'w') as HDF5:
    HDF5.create_dataset('input', data = input_5 )
    HDF5.create_dataset('output', data = output_5 )
    HDF5.create_dataset('uuid', data = uuid_5 )

# Sanity checking the created file
hdf5_file = h5py.File('subset5_64x64x64-patch.hdf5', 'r') # open in read-only mode

for name in [key for key in hdf5_file.keys()]:
    print(name);
    print(hdf5_file[name]);
