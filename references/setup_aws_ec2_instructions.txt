Setting Up EC2, S3, and EBS

# run connect ssh command (taken from EC2 dashboard) e.g.
# note you must pass the path to the .pem file or cd to the dir

$ ssh -i "my_pem_file.pem" ec2-user@ec2-54-89-63-72.compute-1.amazonaws.com
$ lsblk

    NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
    xvda    202:0    0   8G  0 disk
    └─xvda1 202:1    0   8G  0 part /
    xvdb    202:16   0  10G  0 disk

$ sudo file -s /dev/xvdb

    /dev/xvdb: data

-------------------------- WARNING ----------------------------
# DO NOT RUN THIS COMMAND IF VOLUME HAS DATA ON IT
# THE VOLUME WILL BE FORMATTED. SKIP THIS STEP!!

# create an ext4 filesystem on the EBS drive
$ sudo mkfs -t ext4 /dev/xvdb

    mke2fs 1.42.12 (29-Aug-2014)
    Creating filesystem with 2621440 4k blocks and 655360 inodes
    Filesystem UUID: 32dc04b7-5788-4796-95c5-ebcaa3ab4757
    Superblock backups stored on blocks:
    	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

    Allocating group tables: done
    Writing inode tables: done
    Creating journal (32768 blocks): done
    Writing superblocks and filesystem accounting information: done

-------------------------- WARNING ----------------------------

# Create a mount point for your new volume... or old volume!
$ sudo mkdir name-of-your-dir

# Mount the new volume!
$ sudo mount /dev/xvdb /name-of-your-dir/

# Alter the fstaub file to auto reconnect EBS drive on system reboot
# back up your fstab file....
$ sudo cp /etc/fstab /etc/fstab.bak

# Open fstab and make an entry
$ nano /etc/fstab.bak
# Add the following to your fstab files
  /dev/xvdb /test-ebs ext4 defaults,nofail

$ cat /etc/fstab.bak
    #
    LABEL=/     /           ext4    defaults,noatime  1   1
    tmpfs       /dev/shm    tmpfs   defaults        0   0
    devpts      /dev/pts    devpts  gid=5,mode=620  0   0
    sysfs       /sys        sysfs   defaults        0   0
    proc        /proc       proc    defaults        0   0
    /dev/xvdb   /test-ebs   ext4    defaults,nofail

# Should see nothing from this command, means fstab changes are good
$ sudo mount -a

# Root owns your EBS, lets change that....
$ sudo chown -R ec2-user:ec2-user ~/name-of-your-dir/

-------------------------- PHASE 2 - Configure EC2 Instance, Git, and Conda --------------------------
# for patch extractor need heavy duty zipping equipment
$ yum-config-manager --enable epel
$ yum install -y p7ip
$ cp /usr/bin/7za /usr/bin/7z

$ sudo yum install git

# Miniconda install
$ cd
$ wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
$ bash Miniconda3-latest-Linux-x86_64.sh
# follow instructions...
$ source .bashrc # dont need to open new terminal window
# test Miniconda
$ conda list

$ rm Miniconda3-latest-Linux-x86_64.sh
$ cd /ucsd-capstone-git-repo/
$ bash create_conda_env.sh # Takes ~5 min
$ confa env list # should see 'ucsd' conda env

# Get your paths...
    # /home/ec2-user/patch-volume/csv-files
    # /home/ec2-user/patch-volume/subsets

$ touch extract_patches_config.ini



-------------------------- PHASE 2 - Sync S3 to EC2 --------------------------
# might need sudo here...
$ aws configure

  AWS Access Key ID [None]: ENTER-IT
  AWS Secret Access Key [None]: ENTER-IT
  Default region name [None]: hit enter/return key
  Default output format [None]: hit enter/return key

# Make sure these got saved....
$ aws configure list
        Name                    Value             Type    Location
       ----                    -----             ----    --------
    profile                <not set>             None    None
 access_key     ****************AAAA shared-credentials-file
 secret_key     ****************AAAA shared-credentials-file
     region                <not set>             None    None


# Should see our AWS buckets...
$ aws s3 ls
    2018-01-04 22:05:57 my_bucket_1
    2018-01-04 22:07:26 my_bucket_2
    2018-01-04 22:06:21 my_bucket_3

# Lets test copying a file from S3 to our mnounted EBS drive
aws s3 cp s3://my_bucket/LUNA16/csv-files/annotations.csv ~/test-ebs/test-transfer/

# check with ls in the dir
# IF all is working then you are good to go!

-------------------------- PHASE 3 - Transfer  files from S3 to EC2 --------------------------

$ sudo aws s3 sync s3://my_bucket/LUNA16/csv-files/ ~/patch-volume/csv-files/


# to unmount the drive... do this before exiting!!!!
$ sudo umount /dev/xvdb
$ lsblk
    NAME    MAJ:MIN RM SIZE RO TYPE MOUNTPOINT
    xvda    202:0    0   8G  0 disk
    └─xvda1 202:1    0   8G  0 part /


